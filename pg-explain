#!/usr/bin/env bash

# Executes the given query sql file, and sends the query plan and run time
# statistics to explain.dalibo.com. Opens result page in browser.
#
# Usage: pg-explain <queryfile.sql> -- <psql args>
# Example: pg-explain query.sql -- 'postgres:://localhost:5432/mydb'

set -euo pipefail

die() {
  printf '%s\n' "$1" >&2
  exit 1
}

_open() {
  if [ `uname` == "Darwin" ]; then
    open "$1"
  else
    xdg-open "$1"
  fi
}

declare -a positional

while [[ $# -gt 0 ]]; do
  case "$1" in
    --) shift; break ;;
    *)
      positional+=("$1");
      ;;
  esac
  shift
done

explain='EXPLAIN (ANALYZE, COSTS, VERBOSE, BUFFERS, FORMAT JSON)'
psql_args=( "$@" )
query_file="${positional[0]}"
query_tmp_file=$(mktemp "${TMPDIR:-/tmp/}explain_query.XXXXXXXXX")
plan_tmp_file=$(mktemp "${TMPDIR:-/tmp/}explain_plan.XXXXXXXXX")
echo "$explain" >> $query_tmp_file
cat $query_file >> $query_tmp_file
psql -v ON_ERROR_STOP=1 --no-psqlrc -qAt -f "$query_tmp_file" "${psql_args[@]}" > $plan_tmp_file

# Ended up using httpie here instead of curl because curl doesn't support
# passing file as argument for this type of form POST
_open $(http -ph --form POST https://explain.dalibo.com/new plan=@"$plan_tmp_file" sql=@"$query_file" \
  | grep Location: \
  | sed 's/Location: //' \
  | tr -d '\r')
